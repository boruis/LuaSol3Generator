#ifndef BINDER_Box2D_H
#define BINDER_Box2D_H

#include <Box2D/Box2D.h>
#include <sol/sol.hpp>
    
void register_type_b2Version(sol::state& state);
void register_type_b2Vec2(sol::state& state);
void register_type_b2Vec3(sol::state& state);
void register_type_b2Mat22(sol::state& state);
void register_type_b2Mat33(sol::state& state);
void register_type_b2Rot(sol::state& state);
void register_type_b2Transform(sol::state& state);
void register_type_b2Sweep(sol::state& state);
void register_type_b2Color(sol::state& state);
void register_type_b2Timer(sol::state& state);
void register_type_b2BlockAllocator(sol::state& state);
void register_type_b2ContactFeature(sol::state& state);
void register_type_b2ManifoldPoint(sol::state& state);
void register_type_b2Manifold(sol::state& state);
void register_type_b2WorldManifold(sol::state& state);
void register_enum_b2PointState(sol::state& state);
void register_type_b2ClipVertex(sol::state& state);
void register_type_b2RayCastInput(sol::state& state);
void register_type_b2RayCastOutput(sol::state& state);
void register_type_b2AABB(sol::state& state);
void register_type_b2MassData(sol::state& state);
void register_type_b2CircleShape(sol::state& state);
void register_type_b2EdgeShape(sol::state& state);
void register_type_b2ChainShape(sol::state& state);
void register_type_b2PolygonShape(sol::state& state);
void register_type_b2TreeNode(sol::state& state);
void register_type_b2DynamicTree(sol::state& state);
void register_type_b2Pair(sol::state& state);
void register_type_b2BroadPhase(sol::state& state);
void register_type_b2DistanceProxy(sol::state& state);
void register_type_b2SimplexCache(sol::state& state);
void register_type_b2DistanceInput(sol::state& state);
void register_type_b2DistanceOutput(sol::state& state);
void register_type_b2TOIInput(sol::state& state);
void register_type_b2TOIOutput(sol::state& state);
void register_enum_b2BodyType(sol::state& state);
void register_type_b2BodyDef(sol::state& state);
void register_type_b2Body(sol::state& state);
void register_type_b2Filter(sol::state& state);
void register_type_b2FixtureDef(sol::state& state);
void register_type_b2FixtureProxy(sol::state& state);
void register_type_b2Fixture(sol::state& state);
void register_type_b2ContactFilter(sol::state& state);
void register_type_b2ContactImpulse(sol::state& state);
void register_type_b2ContactListener(sol::state& state);
void register_type_b2Profile(sol::state& state);
void register_type_b2TimeStep(sol::state& state);
void register_type_b2Position(sol::state& state);
void register_type_b2Velocity(sol::state& state);
void register_type_b2SolverData(sol::state& state);
void register_type_b2StackEntry(sol::state& state);
void register_type_b2StackAllocator(sol::state& state);
void register_type_b2ContactManager(sol::state& state);
void register_type_b2World(sol::state& state);
void register_type_b2ContactRegister(sol::state& state);
void register_type_b2ContactEdge(sol::state& state);
void register_enum_b2JointType(sol::state& state);
void register_enum_b2LimitState(sol::state& state);
void register_type_b2Jacobian(sol::state& state);
void register_type_b2JointEdge(sol::state& state);
void register_type_b2JointDef(sol::state& state);
void register_type_b2DistanceJointDef(sol::state& state);
void register_type_b2DistanceJoint(sol::state& state);
void register_type_b2FrictionJointDef(sol::state& state);
void register_type_b2FrictionJoint(sol::state& state);
void register_type_b2GearJointDef(sol::state& state);
void register_type_b2GearJoint(sol::state& state);
void register_type_b2MotorJointDef(sol::state& state);
void register_type_b2MotorJoint(sol::state& state);
void register_type_b2MouseJointDef(sol::state& state);
void register_type_b2MouseJoint(sol::state& state);
void register_type_b2PrismaticJointDef(sol::state& state);
void register_type_b2PrismaticJoint(sol::state& state);
void register_type_b2PulleyJointDef(sol::state& state);
void register_type_b2PulleyJoint(sol::state& state);
void register_type_b2RevoluteJointDef(sol::state& state);
void register_type_b2RevoluteJoint(sol::state& state);
void register_type_b2RopeJointDef(sol::state& state);
void register_type_b2RopeJoint(sol::state& state);
void register_type_b2WeldJointDef(sol::state& state);
void register_type_b2WeldJoint(sol::state& state);
void register_type_b2WheelJointDef(sol::state& state);
void register_type_b2WheelJoint(sol::state& state);
void register_library_Box2D(sol::state& state);
void register_Box2D_free_functions(sol::state& state);

#endif // BINDER_Box2D_H
